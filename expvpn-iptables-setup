#!/bin/sh
set -e

# Specify your network device.
NETDEV_PATTERN='(wl|eth|en)\w+'
VPNDEV='tun0'

# Set default rules to be DROP.
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
ip6tables -P INPUT DROP
ip6tables -P OUTPUT DROP
ip6tables -P FORWARD DROP

# Reset all rules.
iptables -F INPUT
iptables -F OUTPUT
iptables -F FORWARD
ip6tables -F INPUT
ip6tables -F OUTPUT
ip6tables -F FORWARD

# Allow connections on loopback interface.
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Allow connection generated from related or already established connection.
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Allow packets to go out through the vpn dev.
iptables -A OUTPUT -o "$VPNDEV" -j ACCEPT

# For each ExpressVPN's OpenVPN server IP address, we need to allow packets
# to go out from our machine to it to initiate the VPN connection.
for address in `/sbin/ip route | grep -E "dev $NETDEV_PATTERN" | cut -d ' ' -f 1`; do
	# IP addresses which end with ".0" is not a host address, so we skip them as well as "default".
	if ! (echo $address | grep -Eq '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.0(\/[0-9])?|^default$'); then
		iptables -A OUTPUT -p udp -m udp -d $address --dport 1194 -j ACCEPT
		echo "Destination $address:1194 allowed on OUTPUT"
	fi
done
